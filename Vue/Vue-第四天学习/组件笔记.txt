组件化的开发
    组件可以将UI页面切分成一些单独的，独立的单元，整个页面就是这些单元组合而成的，只需要关注构建每个单独的单元，每个组件包含子级的结构，、逻辑和样式，这样既减少了逻辑复杂度，又能实现组件的复用性。当不需要某个组件或替换组件时，而不影响整个应用的运行。
        组件开发的好处：
            降低耦合度、
            提高可维护性、可复用性
            便与协作开发

组件三个组成:
    有结构 必须
    样式
    逻辑

Vue中的组件
    //自定义的标签
    -Vue解析这个自定义标签，把它当成自定义的组件，把组件的结构替换在这个位置
    <news-c></news-c>
    上面这个是浏览器不认识的自定义标签，无法添加特殊功能
    用Vue解析
每次使用组件都是独立，每个组件都是独立的
    使用组件之前先注册组件
        1.全局注册
            任何地方都可以使用
            先注册,后new Vue

            Vue.component(组件id/标识,选项对象)
                未来在模板中把标识当成标签使用
                <标识></标识>

                标识符的命名
                    1.唯一
                    2.驼峰和烤串命名法
                        miaovKetang
                        miaov-miaovKetang

                        使用的时候必须使用烤串命名法
            模板

            组件中选项对象和根实例中选项对象基本一样，另个地方不同
                el:只有根实例的选项对象才有
                data:组件的data必须是函数
        
        2.局部注册

    定制同一个组件不同的数据
        父子组件
            当一个A组件使用在另一个B组件的模板中，称之为A组件为子组件，B组件为父组件

        给子组件传参
            写在行间作为自定义属性，key值是子组件和父组件约定，有语义化，value值是要传入的数据

    每一个组件都是独立的一个实例
        Vue.component('组件名',{
            data(){},
            props:[''] props中的数据，都是作为当前组件实例的属性
            template:`组件`
        })

props验证
    对props做验证
        控制台提示的，主要是给开发者看的

data必须是函数
    
    data必须写上一个函数，return一个新的对象
        1.避免多个组件公用同一个对象
        2.函数中使用this，取实例上某些数据

    父子组件之间的通信
        父组件 -> 子组件通信: 使用props
        子组件 -> 父组件通信: 自定义事件
    
    父组件关心子组件中发生了某个事情
        在组件中需要发布个事件 this.$emit('自定义事件名')
		在组件标签行间监听这个自定义事件 @自定义事件名 = '方法'

    子组件不能改父组件的数据
        需要在子组件修改数据
            1.Prop 作为data的初始值，子组件想把它当作局部数据来用

封装组件
    1. 定制数据
        需不需要定制数据
        需要定制那些数据 先预设好 约定的key值

单向数据流:数据只能从父组件传递给子组件，子组件不能改变父组件的数据
    传入一个对象的形式，来测试一下，一个组件改变数据对另一个组件的影响
    利用对象这种引用的特性来测试，一个组件内部发生变化，不止影响这一个组件的变化，使用这个对象的别的组件也会受到影响，这种方式是不可取的。
    说明为什么不让直接改变props，防止改变别的组件的状态